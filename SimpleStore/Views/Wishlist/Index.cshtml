@model SimpleStore.Models.WishlistViewModel
@{
    ViewData["Title"] = "My Wishlist";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-heart text-danger"></i>
                    My Wishlist
                    @if (Model.TotalItems > 0)
                    {
                        <span class="badge bg-secondary">@Model.TotalItems item@(Model.TotalItems == 1 ? "" : "s")</span>
                    }
                </h2>
                <a asp-controller="Product" asp-action="Index" class="btn btn-outline-primary">
                    <i class="fas fa-shopping-bag"></i>
                    Continue Shopping
                </a>
            </div>

            @if (Model.TotalItems == 0)
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="fas fa-heart-broken fa-5x text-muted"></i>
                    </div>
                    <h4 class="text-muted">Your wishlist is empty</h4>
                    <p class="text-muted mb-4">Discover amazing products and add them to your wishlist!</p>
                    <a asp-controller="Product" asp-action="Index" class="btn btn-primary btn-lg">
                        <i class="fas fa-shopping-bag"></i>
                        Start Shopping
                    </a>
                </div>
            }
            else
            {
                <div class="row" id="wishlist-items">
                    @foreach (var item in Model.Items.OrderByDescending(i => i.AddedAt))
                    {
                        <div class="col-lg-4 col-md-6 col-sm-12 mb-4" id="wishlist-item-@item.ProductId">
                            <div class="card h-100 shadow-sm">
                                <div class="position-relative">
                                    <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/images/no-image.jpg" : item.ImageUrl)"
                                         class="card-img-top"
                                         alt="@item.ProductName"
                                         style="height: 200px; object-fit: cover;">

                                    <!-- Remove from wishlist button -->
                                    <button class="btn btn-sm btn-outline-danger position-absolute"
                                            style="top: 10px; right: 10px;"
                                            onclick="removeFromWishlist(@item.ProductId)"
                                            title="Remove from wishlist">
                                        <i class="fas fa-heart"></i>
                                    </button>

                                    @if (!string.IsNullOrEmpty(item.Category))
                                    {
                                        <span class="badge bg-primary position-absolute" style="top: 10px; left: 10px;">
                                            @item.Category
                                        </span>
                                    }
                                </div>

                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@item.ProductName</h5>
                                    <p class="card-text text-muted small flex-grow-1">
                                        @if (item.ProductDescription.Length > 100)
                                        {
                                            @(item.ProductDescription.Substring(0, 100))
                                        }
                                        else
                                        {
                                            @item.ProductDescription
                                        }
                                    </p>

                                    <div class="mt-auto">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h4 class="text-primary mb-0">@item.Price.ToString("C")</h4>
                                            <small class="text-muted">
                                                Added @item.AddedAt.ToString("MMM dd, yyyy")
                                            </small>
                                        </div>

                                        <div class="btn-group w-100" role="group">
                                            @if (item.IsAvailable)
                                            {
                                                <button class="btn btn-success"
                                                        onclick="moveToCart(@item.ProductId)">
                                                    <i class="fas fa-shopping-cart"></i>
                                                    Add to Cart
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-secondary" disabled>
                                                    <i class="fas fa-exclamation-triangle"></i>
                                                    Out of Stock
                                                </button>
                                            }

                                            <a asp-controller="Product" asp-action="Details" asp-route-id="@item.ProductId"
                                               class="btn btn-outline-primary">
                                                <i class="fas fa-eye"></i>
                                                View
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Bulk Actions -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Bulk Actions</h5>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-success" onclick="moveAllToCart()">
                                        <i class="fas fa-shopping-cart"></i>
                                        Move All Available to Cart
                                    </button>
                                    <button class="btn btn-outline-danger" onclick="clearWishlist()">
                                        <i class="fas fa-trash"></i>
                                        Clear Wishlist
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function removeFromWishlist(productId) {
            if (!confirm('Are you sure you want to remove this item from your wishlist?')) {
                return;
            }

            $.ajax({
                url: '@Url.Action("RemoveFromWishlist", "Wishlist")',
                type: 'POST',
                data: {
                    productId: productId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.success) {
                        $('#wishlist-item-' + productId).fadeOut(300, function () {
                            $(this).remove();

                            // Check if wishlist is now empty
                            if ($('#wishlist-items .col-lg-4').length === 0) {
                                location.reload();
                            }
                        });

                        showNotification(response.message, 'success');
                        updateWishlistBadge(response.itemCount);
                    } else {
                        showNotification(response.message, 'error');
                    }
                },
                error: function () {
                    showNotification('An error occurred. Please try again.', 'error');
                }
            });
        }

        function moveToCart(productId) {
            $.ajax({
                url: '@Url.Action("MoveToCart", "Wishlist")',
                type: 'POST',
                data: {
                    productId: productId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.success) {
                        $('#wishlist-item-' + productId).fadeOut(300, function () {
                            $(this).remove();

                            // Check if wishlist is now empty
                            if ($('#wishlist-items .col-lg-4').length === 0) {
                                location.reload();
                            }
                        });

                        showNotification(response.message, 'success');
                        // Update cart badge if you have one
                        updateCartBadge();
                    } else {
                        showNotification(response.message, 'error');
                    }
                },
                error: function () {
                    showNotification('An error occurred. Please try again.', 'error');
                }
            });
        }

        function moveAllToCart() {
            if (!confirm('Move all available items to cart?')) {
                return;
            }

            var availableItems = [];
            $('#wishlist-items .btn-success').each(function () {
                var productId = $(this).attr('onclick').match(/\d+/)[0];
                availableItems.push(productId);
            });

            if (availableItems.length === 0) {
                showNotification('No available items to move to cart.', 'info');
                return;
            }

            var promises = availableItems.map(function (productId) {
                return $.ajax({
                    url: '@Url.Action("MoveToCart", "Wishlist")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    }
                });
            });

            Promise.all(promises).then(function () {
                showNotification('All available items moved to cart!', 'success');
                location.reload();
            }).catch(function () {
                showNotification('Some items could not be moved. Please try again.', 'error');
            });
        }

        function clearWishlist() {
            if (!confirm('Are you sure you want to clear your entire wishlist? This action cannot be undone.')) {
                return;
            }

            var allItems = [];
            $('#wishlist-items .col-lg-4').each(function () {
                var productId = $(this).attr('id').replace('wishlist-item-', '');
                allItems.push(productId);
            });

            var promises = allItems.map(function (productId) {
                return $.ajax({
                    url: '@Url.Action("RemoveFromWishlist", "Wishlist")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    }
                });
            });

            Promise.all(promises).then(function () {
                showNotification('Wishlist cleared successfully!', 'success');
                location.reload();
            }).catch(function () {
                showNotification('An error occurred. Please try again.', 'error');
            });
        }

        function showNotification(message, type) {
            // Create a simple notification
            var alertClass = type === 'success' ? 'alert-success' :
                type === 'error' ? 'alert-danger' : 'alert-info';

            var notification = $('<div class="alert ' + alertClass + ' alert-dismissible fade show position-fixed" style="top: 20px; right: 20px; z-index: 9999;">' +
                '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                message + '</div>');

            $('body').append(notification);

            setTimeout(function () {
                notification.alert('close');
            }, 3000);
        }

        function updateWishlistBadge(count) {
            // Update wishlist badge in header if it exists
            var badge = $('.wishlist-badge');
            if (badge.length > 0) {
                if (count > 0) {
                    badge.text(count).show();
                } else {
                    badge.hide();
                }
            }
        }

        function updateCartBadge() {
            // This would update cart badge - implement based on your cart structure
        }
    </script>
}
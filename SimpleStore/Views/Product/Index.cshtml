@model SimpleStore.Models.ProductListViewModel

@{
    ViewData["Title"] = "Products";
}

@section Styles {
    <style>
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .product-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: var(--border-radius);
            overflow: hidden;
            transition: var(--transition);
            border: none;
            box-shadow: var(--shadow-soft);
            backdrop-filter: blur(10px);
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .product-card:hover {
            transform: translateY(-8px);
            box-shadow: var(--shadow-hover);
        }

        .product-image {
            height: 200px;
            overflow: hidden;
            position: relative;
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            transition: var(--transition);
        }

        .product-card:hover .product-image img {
            transform: scale(1.05);
        }

        .product-info {
            padding: 1.5rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .product-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 0.5rem;
            line-height: 1.3;
        }

        .product-description {
            color: var(--text-muted);
            font-size: 0.9rem;
            margin-bottom: 1rem;
            flex-grow: 1;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .product-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: auto;
            gap: 1rem;
        }

        .product-price {
            font-size: 1.2rem;
            font-weight: 700;
            color: var(--primary-blue);
        }

        .product-actions {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .view-details-btn {
            background: linear-gradient(135deg, var(--primary-500), var(--secondary-500));
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            color: white;
            font-weight: 500;
            font-size: 0.9rem;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
        }

        .view-details-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(135, 206, 235, 0.4);
            color: white;
            text-decoration: none;
        }

        /* Wishlist Heart Button Styles */
        .wishlist-quick-btn {
            transition: all 0.3s ease;
            background: none;
            border: none;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            outline: none;
        }

        /* حالت عادی - قلب توخالی */
        .wishlist-quick-btn {
            color: #999;
        }

            .wishlist-quick-btn:hover {
                transform: scale(1.1);
                color: #dc3545;
            }

            /* حالت کلیک شده - قلب پر */
            .wishlist-quick-btn.active,
            .wishlist-quick-btn.btn-danger {
                color: #dc3545;
            }

                .wishlist-quick-btn.active:hover,
                .wishlist-quick-btn.btn-danger:hover {
                    transform: scale(1.1);
                    color: #c82333;
                }

            /* برای آیکون قلب */
            .wishlist-quick-btn i {
                font-size: 18px;
                transition: all 0.3s ease;
            }

            /* قلب توخالی - استفاده از far fa-heart */
            .wishlist-quick-btn:not(.active) i::before {
                content: "\f08a"; /* far fa-heart - قلب توخالی */
                font-family: "Font Awesome 5 Free";
                font-weight: 400;
            }

            /* قلب پر - استفاده از fas fa-heart */
            .wishlist-quick-btn.active i::before,
            .wishlist-quick-btn.btn-danger i::before {
                content: "\f004"; /* fas fa-heart - قلب پر */
                font-family: "Font Awesome 5 Free";
                font-weight: 900;
            }

        .category-badge {
            backdrop-filter: blur(10px);
            background-color: rgba(0, 123, 255, 0.9);
            color: white;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
        }

        .no-products {
            text-align: center;
            padding: 3rem;
            background: rgba(255, 255, 255, 0.95);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-soft);
        }

        .no-products-icon {
            font-size: 4rem;
            color: var(--text-muted);
            margin-bottom: 1rem;
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            margin-top: 3rem;
        }

        .pagination {
            background: rgba(255, 255, 255, 0.95);
            border-radius: var(--border-radius);
            padding: 0.5rem;
            box-shadow: var(--shadow-soft);
            backdrop-filter: blur(10px);
        }

        .page-link {
            border: none;
            padding: 0.5rem 1rem;
            margin: 0 0.25rem;
            border-radius: 8px;
            color: var(--text-dark);
            transition: var(--transition);
            background: transparent;
        }

        .page-link:hover {
            background: var(--light-blue);
            color: var(--primary-blue);
            transform: translateY(-2px);
        }

        .page-item.active .page-link {
            background: linear-gradient(135deg, var(--primary-blue), #4A90E2);
            color: white;
            box-shadow: var(--shadow-soft);
        }

        /* Notification Animations */
        @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Mobile Responsiveness */
        @@media (max-width: 768px) {
            .filter-controls {
                flex-direction: column;
                gap: 1rem;
            }

            .filter-group {
                min-width: 100%;
            }

            .products-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 1rem;
            }

            .product-footer {
                flex-direction: column;
                gap: 0.5rem;
                align-items: stretch;
            }

            .product-actions {
                justify-content: center;
            }
        }
    </style>
}

<!-- Filters Section -->
<div class="filters-section">
    <form method="get" asp-action="Index" id="filterForm">
        <!-- Filter Controls -->
        <div class="filter-controls">
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-tag me-1"></i> Category
                </label>
                <select name="Category" class="filter-dropdown filter-select" onchange="this.form.submit()">
                    <option value="">All Categories</option>
                    @foreach (var category in ViewBag.Categories)
                    {
                        <option value="@category" selected="@(Model.Category == category)">@category</option>
                    }
                </select>
            </div>

            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-sort me-1"></i> Sort By
                </label>
                <select name="SortOrder" class="filter-dropdown active filter-select" onchange="this.form.submit()">
                    <option value="newest" selected="@(Model.SortOrder == "newest" || Model.SortOrder == null)">✨ Newest First</option>
                    <option value="price_asc" selected="@(Model.SortOrder == "price_asc")">💰 Price: Low to High</option>
                    <option value="price_desc" selected="@(Model.SortOrder == "price_desc")">💎 Price: High to Low</option>
                </select>
            </div>
        </div>
    </form>
</div>

<!-- Products Grid -->
@if (!Model.Products.Any())
{
    <div class="no-products">
        <div class="no-products-icon">📦</div>
        <h3>No Products Found</h3>
        <p class="text-muted">We couldn't find any products matching your criteria. Try adjusting your search or filters.</p>
        <a asp-action="Index" class="btn btn-primary mt-3">
            <i class="fas fa-refresh me-1"></i>View All Products
        </a>
    </div>
}
else
{
    <div class="products-grid">
        @foreach (var product in Model.Products)
        {
            <div class="product-card">
                <div class="product-image position-relative">
                    <img src="@(string.IsNullOrEmpty(product.ImageUrl) ? "/images/no-image.jpg" : product.ImageUrl)" 
                         alt="@product.Name" 
                         loading="lazy">
                </div>
                <div class="product-info">
                    <h5 class="product-title">@product.Name</h5>
                    <div class="product-footer">
                        <span class="product-price">@product.Price.ToString("C")</span>
                        <div class="product-actions">
                            <a asp-action="Details" 
                               asp-route-id="@product.Id" 
                               class="view-details-btn">
                                <i class="fas fa-eye me-1"></i>View Details
                            </a>
                            @if (User.Identity.IsAuthenticated)
                            {
                                <button class="wishlist-quick-btn"
                                        onclick="quickToggleWishlist(@product.Id, this)"
                                        data-product-id="@product.Id"
                                        title="Add to Wishlist">
                                    <i class="far fa-heart"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model.PaginationInfo.TotalPages > 1)
    {
        <div class="pagination-container">
            <nav aria-label="Product pagination">
                <ul class="pagination">
                    @if (Model.PaginationInfo.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index"
                               asp-route-SearchTerm="@Model.SearchQuery"
                               asp-route-Category="@Model.Category"
                               asp-route-SortOrder="@Model.SortOrder"
                               asp-route-PageNumber="@(Model.PaginationInfo.CurrentPage - 1)">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                    }

                    @for (int i = Math.Max(1, Model.PaginationInfo.CurrentPage - 2); 
                          i <= Math.Min(Model.PaginationInfo.TotalPages, Model.PaginationInfo.CurrentPage + 2); 
                          i++)
                    {
                        <li class="page-item @(i == Model.PaginationInfo.CurrentPage ? "active" : "")">
                            <a class="page-link" asp-action="Index"
                               asp-route-SearchTerm="@Model.SearchQuery"
                               asp-route-Category="@Model.Category"
                               asp-route-SortOrder="@Model.SortOrder"
                               asp-route-PageNumber="@i">
                                @i
                            </a>
                        </li>
                    }

                    @if (Model.PaginationInfo.CurrentPage < Model.PaginationInfo.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index"
                               asp-route-SearchTerm="@Model.SearchQuery"
                               asp-route-Category="@Model.Category"
                               asp-route-SortOrder="@Model.SortOrder"
                               asp-route-PageNumber="@(Model.PaginationInfo.CurrentPage + 1)">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
}

<!-- Add this hidden form for CSRF token -->
@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Enhanced search functionality
        document.getElementById('searchInput')?.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('filterForm').submit();
            }
        });

        // Add loading state to search button
        document.getElementById('filterForm').addEventListener('submit', function() {
            const searchBtn = document.querySelector('.search-btn');
            if (searchBtn) {
                const originalText = searchBtn.innerHTML;
                searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Searching...';
                searchBtn.disabled = true;
                
                // Re-enable after a short delay (in case form doesn't submit)
                setTimeout(function() {
                    searchBtn.innerHTML = originalText;
                    searchBtn.disabled = false;
                }, 3000);
            }
        });
    </script>

    @if (User.Identity.IsAuthenticated)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Check wishlist status for all products on page load
                checkAllWishlistStatuses();
            });

            function checkAllWishlistStatuses() {
                const wishlistButtons = document.querySelectorAll('.wishlist-quick-btn, [data-product-id]');
                
                wishlistButtons.forEach(button => {
                    const productId = button.getAttribute('data-product-id');
                    if (productId) {
                        checkProductWishlistStatus(productId, button);
                    }
                });
            }

            function checkProductWishlistStatus(productId, button) {
                fetch(`@Url.Action("IsInWishlist", "Wishlist")?productId=${productId}`)
                    .then(response => response.json())
                    .then(data => {
                        updateWishlistButtonState(button, data.inWishlist);
                    })
                    .catch(error => console.log('Error checking wishlist status:', error));
            }

            function quickToggleWishlist(productId, button) {
                // بررسی وضعیت فعلی با کلاس active
                const isCurrentlyInWishlist = button.classList.contains('active') || button.classList.contains('btn-danger');
                const url = isCurrentlyInWishlist ?
                    '@Url.Action("RemoveFromWishlist", "Wishlist")' :
                    '@Url.Action("AddToWishlist", "Wishlist")';

                // Disable button during request
                button.disabled = true;

                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                const tokenValue = token ? token.value : '';

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `productId=${productId}&__RequestVerificationToken=${tokenValue}`
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateWishlistButtonState(button, !isCurrentlyInWishlist);
                            showQuickNotification(data.message, 'success');

                            // Update all buttons for this product
                            const allButtons = document.querySelectorAll(`[data-product-id="${productId}"]`);
                            allButtons.forEach(btn => {
                                if (btn !== button) {
                                    updateWishlistButtonState(btn, !isCurrentlyInWishlist);
                                }
                            });

                            // Update wishlist badge in header
                            if (typeof updateWishlistBadge === 'function') {
                                updateWishlistBadge(data.itemCount || 0);
                            }
                        } else {
                            showQuickNotification(data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.log('Error:', error);
                        showQuickNotification('An error occurred. Please try again.', 'error');
                    })
                    .finally(() => {
                        button.disabled = false;
                    });
            }

            function updateWishlistButtonState(button, isInWishlist) {
                const icon = button.querySelector('i');

                if (isInWishlist) {
                    // اضافه کردن کلاس active برای قلب پر
                    button.classList.add('active');
                    button.classList.remove('btn-outline-danger');
                    button.classList.add('btn-danger');
                    button.title = 'Remove from Wishlist';
                    if (icon) {
                        icon.className = 'fas fa-heart';
                    }
                } else {
                    button.classList.remove('active');
                    button.classList.remove('btn-danger');
                    button.classList.add('btn-outline-danger');
                    button.title = 'Add to Wishlist';
                    if (icon) {
                        icon.className = 'far fa-heart';
                    }
                }
            }

            function showQuickNotification(message, type) {
                // Create a toast-like notification
                const toast = document.createElement('div');
                toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
                toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 250px; animation: slideIn 0.3s ease;';
                toast.innerHTML = `
                    <div class="d-flex align-items-center">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                        <span>${message}</span>
                        <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
                    </div>
                `;
                
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 3000);
            }
        </script>
    }
}